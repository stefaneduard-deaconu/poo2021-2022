//
// Created by visan on 5/3/22.
//

#ifndef COLOCVIU_MALWARE_H
#define COLOCVIU_MALWARE_H

#include"IoBase.h"
#include<vector>
#include<set>

class Date : public IoBase {
private:
    int day;
    int month;
    int year;

public:
    int getDay() const {
        return day;
    }

    int getMonth() const {
        return month;
    }

    int getYear() const {
        return year;
    }

    Date() : day(0), month(0), year(0) {


    }

    Date(int _day, int _month, int _year) : day(_day), month(_month), year(_year) {

    }

    istream &read(istream &is) override {
        std::cout << "Day: ";
        is >> day;
        std::cout << "Month: ";
        is >> month;
        std::cout << "Year: ";
        is >> year;
        return is;
    }

    ostream &write(ostream &os) const override {

        os << "Day: " << day << ", Month: " << month << ", Year: " << year;
        return os;
    }
};


//Create a template function to read any type of vector
template<class type>
istream &operator>>(istream &is, std::vector<type> &vec) {
    size_t size;
    std::cout << "Vector size: ";
    is >> size;
    vec.clear();
    vec.resize(size);
    std::cout << "Elements: ";
    for (type &element: vec) {
        is >> element;
    }
    return is;
}

//Create a template function to write any type of vector
template<class type>
ostream &operator<<(ostream &os, const std::vector<type> &vec) {
    os << "Elements: ";
    for (const type &element: vec) {
        os << element << " ";
    }
    return os;
}

class Malware : public IoBase {
private:
    //The rating of the malware.
    double rating;

    //The date of infection.
    Date infection_date;

    //The name of the malware.
    std::string name;

    //The infection method of the malware
    std::string infection_method;

    //The registeres affected by the malware.
    std::vector<std::string> registers;
public:
    Malware() : rating(0), infection_date(), name(), infection_method(), registers() {


    }


    istream &read(istream &is) override {
        std::cout << "Malware rating: ";
        is >> rating;
        std::cout << "Infection date: ";
        is >> infection_date;
        std::cout << "Name: ";
        is >> name;

        std::cout << "Infection method: ";
        is >> infection_method;
        std::cout << "Register: ";
        is >> registers;
        return is;
    }

    ostream &write(ostream &os) const override {
        os << "Malware rating: " << rating << endl;
        os << "Infection date: " << infection_date << endl;
        os << "Name: " << name << endl;
        os << "Infection method: " << infection_method << endl;
        os << "Registers: " << registers << endl;
        return os;
    }

    virtual double impact() const {
        double result = 0;
        for (const string &s: registers) {
            if (s == "HKLM-run" || s == "HKCU-run") {
                result += 20;
            }
        }
        return result;
    }
};


class RootKit : public virtual Malware {
protected:

    //The list of imports.
    vector <string> imports;

    //The list of signifiant strings.
    vector <string> signifiant;
public:

    RootKit() : Malware(), imports(), signifiant() {

    }


    istream &read(istream &is) override {
        Malware::read(is);
        std::cout << "Imports: ";
        is >> imports;
        std::cout << "Signifiant strings: ";
        is >> signifiant;
        return is;
    }

    ostream &write(ostream &os) const override {
        Malware::write(os);
        os << "Imports: " << imports << endl;
        os << "Signifiant strings : " << signifiant << endl;
        return os;
    }

    double impact() const override {
        std::set<string> important_strings = {"System Service Descriptor Table",
                                              "SSDT",
                                              "NtCreateFile"};
        std::string important_import = "ntoskrnl.exe";

        double result = Malware::impact();
        for (const string &s: signifiant) {
            if (important_strings.count(s)) {
                result += 100;
            }
        }

        for (const string &s: imports) {
            if (s == important_import) {
                result *= 2;
                break;
            }
        }
        return result;
    }

};

class KeyLogger : public virtual Malware {
protected:

    //The list of functions.
    vector <string> functions;

    //The list of signifiant strings.
    vector <string> keys;
public:

    KeyLogger() : Malware(), functions(), keys() {

    }


    istream &read(istream &is) override {
        Malware::read(is);
        std::cout << "Functions: ";
        is >> functions;
        std::cout << "Keys: ";
        is >> keys;
        return is;
    }

    ostream &write(ostream &os) const override {
        Malware::write(os);
        os << "Functions: " << functions << endl;
        os << "Keys: " << keys << endl;
        return os;
    }

    double impact() const override {
        double result = Malware::impact();
        std::set<string> important_keys = {"[Up]", "[Num Lock]", "[Down]", "[Right]", "[Up]", "[Left]", "[PageDown]"};
        std::set<string> important_functions = {"CreateFileW", "OpenProcess", "ReadFile", "WriteFile", "RegisterHotKey",
                                                "SetWindowsHookEx"};
        for (const string &s: keys) {
            if (important_keys.count(s)) {
                result += 10;
            }
        }
        return result;

    }
};

class KernelKeylogger : public RootKit, public KeyLogger {
private:

    //The list of hidden files.
    vector <string> hidden_files;

    //The list of hidden registers.
    vector <string> hidden_registers;
public:

    KernelKeylogger() : RootKit(), KeyLogger(), hidden_files(), hidden_registers() {

    }


    istream &read(istream &is) override {

        RootKit::read(is);
        //Am comentat aceasta linie pentru a evita citirea Malware de doua ori
        //KeyLogger::read(is);
        std::cout << "Functions: ";
        is >> functions;
        std::cout << "Keys: ";
        is >> keys;


        std::cout << "Hidden files: ";
        is >> hidden_files;
        std::cout << "Hidden registers: ";
        is >> hidden_registers;
        return is;
    }

    ostream &write(ostream &os) const override {
        RootKit::write(os);
        KeyLogger::write(os);
        os << "Hidden files: " << hidden_files << endl;
        os << "Hidden registers: : " << hidden_registers << endl;
        return os;
    }

    double impact() const override {
        //We subtract Malware::impact as it is counted twice.
        double result = RootKit::impact() + KeyLogger::impact();
        if (!hidden_files.empty()) {
            result += 20;
        }
        if (!hidden_registers.empty()) {
            result += 30;
        }
        return result;
    }
};

class Ransomware : public Malware {
private:
    //The encryption rating.
    unsigned encryption_rating;

    //The obfuscation rating.
    double obfuscation_rating;
public:


    Ransomware() : Malware(), encryption_rating(0), obfuscation_rating(0) {

    }


    istream &read(istream &is) override {
        Malware::read(is);
        std::cout << "Encryption rating: ";
        is >> encryption_rating;
        std::cout << "Obfuscation rating: ";
        is >> obfuscation_rating;
        return is;
    }

    ostream &write(ostream &os) const override {
        Malware::write(os);
        os << "Encryption rating: " << encryption_rating << endl;
        os << "Obfuscation rating: " << obfuscation_rating << endl;
        return os;
    }

    double impact() const override {
        double result = encryption_rating + obfuscation_rating;
        return result;
    }
};

#endif //COLOCVIU_MALWARE_H
